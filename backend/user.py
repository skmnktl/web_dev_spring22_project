import crud
import json
from random import choice


USER_FIELDS = ['password','email','accountType','securityQuestions','firstname','lastname','username','active']

class User:
    
    def __init__(self):
        self.id: int = None # number generated by sql
        self.password = None
        self.email = None
        self.accountType = None # subset of  "ATS" (s Student, t Teacher, a Admin)
        self.securityQuestions = dict()
        self.firstname = ""
        self.lastname = ""
        self.username = None # set equal to email 
        self.coursesAndAssignments = dict()


    def createUser(self,accountType, password, username, securityQuestions, firstname, lastname):
        self.accountType = accountType
        self.password = password
        self.username = username
        self.email = username
        self.firstname = firstname
        self.lastname = lastname
        self.securityQuestions = json.dumps(securityQuestions)
        self.active = True
        

    @staticmethod
    def isUsernameUnique(username) -> bool:
        raise NotImplementedError

    @staticmethod
    def getUserInfo(username):
        row = crud.read("user","username",username)
        print(row)
        # TODO reformat
    
    @staticmethod
    def changeUserData(username, field, newValue):
        if field == "securityQuestions":
            raise Exception("Use updateSecurityQuestionAnswer method.")
        else:
            crud.update("user",'username',username, field, newValue)

    @staticmethod
    def updateSecurityQuestionAnswer(username, question, answer):
        User.replaceSecurityQuestion(username,question,question,answer)
    @staticmethod
    def chooseSecurityQuestionForPrompt(username):
        questions = json.loads(crud.read("user","username",username,["securityQuestions"]))
        return choice(questions.keys())
    
    @staticmethod
    def checkIfSecurityQuestionResponseIsRight(username, question, answer):
        questions = json.loads(crud.read("user","username",username,["securityQuestions"]))
        return questions[question] == answer
    
    @staticmethod
    def replaceSecurityQuestion(username, old_question, new_question, answer):
        questions = json.loads(crud.read("user","username",username,["securityQuestions"]))
        questions.pop(old_question)
        questions[new_question] = answer
        questions = json.dumps(questions)
        crud.update('user','username',username,'securityQuestions',questions)
    
    @staticmethod
    def authentication(username: str, password: str):
        return password == crud.read("user","username",username,["password"])
    
    @staticmethod
    def isStudent(username):
        return "S" in crud.read("user","username",username,["accountType"])
    
    @staticmethod
    def isTeacher(username):
        return "T" in crud.read("user","username",username,["accountType"])
    
    @staticmethod
    def isAdmin(username):
        return "A" in crud.read("user","username",username,["accountType"])
